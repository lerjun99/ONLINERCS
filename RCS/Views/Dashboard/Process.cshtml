@model RCS.Models.Fees_Details;
@using System.Globalization 
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string message = "";
    if (ViewData["Message"] != null)
    {
        message = ViewData["Message"].ToString();
    }
    decimal totalDue;
    decimal chrgamt;
    decimal.TryParse(Model.TOTAL_DUE, out totalDue); // Convert string to decimal
    var formattedTotalDue = totalDue.ToString("N2", CultureInfo.InvariantCulture);
}
<style>
    #validation
    {
        font-weight: bolder;
        font-size: 30px;
    }

    #message {
        font-size: 25px;
        text-align:center;
    }
    .btn-cancel {
        width: 100% !important;
        position: relative !important;
        border-radius: 99px !important;
        background-color: #d03a4b !important;
        border: 3px solid #d03a4b !important;
        box-sizing: border-box !important;
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        justify-content: center !important;
        padding: 10px 55px !important;
        color: var(--light) !important;
        transition: all 0.5s ease-in-out !important;
    }

    .btn-NO {
        width: 100% !important;
        position: relative !important;
        border-radius: 99px !important;
        border: 3px solid #d03a4b !important;
        box-sizing: border-box !important;
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        justify-content: center !important;
        padding: 10px 55px !important;
        color: #d03a4b !important;
        transition: all 0.5s ease-in-out !important;
    }
    .img-header
    {
        display: flex;
        width: 100%;
        justify-content: center;
    }
    .btn-pay {
        width: 100% !important;
        color: var(--white) !important;
        transition: all 0.5s ease-in-out !important;
        padding: 10px 65px !important;
        border-radius: 15px !important;
        position: relative !important;
        border-radius: 99px !important;
        background-color: #003f88;
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        justify-content: center !important;
        box-sizing: border-box !important;
        border:none !important;
    }

    .sub-content-mv {
        display: flex;
        justify-content: space-between;
        gap: 20px;
    }

    .print-page-md {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        flex-direction: column;
    }

    .text-regular {
        font-weight: normal !important;
    }

    
    input[type="text"]:enabled, input[type="number"]:enabled {
        background-color: white;
        color: black;
        cursor: pointer;
    }

    /* Styling for disabled elements */
    input[type="text"]:disabled, input[type="number"]:disabled {
        background-color: #d3d3d3;
        color: #6c757d;
        cursor: not-allowed;
    }
    .dynamic-element.changed {
        margin-top: 20px;
        color: red;
        margin: 20px 0px 0px 0px;
       
    }

    .dynamic-element {
        margin-top: 20px;
        color: red;
        cursor: pointer;
        margin: 20px 0px 0px 150px;
    }
    #fees_details th,td
    {
        text-align: center !important;
    }
    .collapsible {
        color: var(--dark);
        cursor: pointer;
        padding: 10px;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
        border:none;
        background-color:transparent;
    
        
    }

    .mod-formd {
        width: 80%;
        display: flex;
        flex-direction: column;
    }
    .mod-forms
    {
        width: 80%;
        display: flex;
        flex-direction: column;
        margin: 15px;
    }
    .mod-input
    {
        font-size: 1.2rem;
        height: 35px;
        padding: 10px;
        outline: none;
        border: 1px solid #e7e6e6;
        box-shadow: inset 1px 2px 1px 1px rgba(116, 113, 113, 0.5);
        border-radius: 5px;
        width: 100%;
        color: var(--secondary-dark);
        margin-top: 10px;
    }

    .amount-inputs {
        font-size: 1.2rem;
        height: 35px;
        padding: 10px;
        outline: none;
        border: 1px solid #e7e6e6;
        box-shadow: inset 1px 2px 1px 1px rgba(116, 113, 113, 0.5);
        border-radius: 5px;
        width: 100%;
        color: var(--secondary-dark);
        margin-top: 10px;
    }

    .chequeamount {
        font-size: 1.2rem;
        height: 35px;
        padding: 10px;
        outline: none;
        border: 1px solid #e7e6e6;
        box-shadow: inset 1px 2px 1px 1px rgba(116, 113, 113, 0.5);
        border-radius: 5px;
        width: 100%;
        color: var(--secondary-dark);
        margin-top: 10px;
    }
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type="number"] {
        -moz-appearance: textfield;
    }
    table
    {
        border-radius:10px;
    }
    .btn-cancel
    {
        width: 100% !important;
        position: relative !important;
        border-radius: 99px !important;
        background-color: #d03a4b !important;
        border: 3px solid #d03a4b !important;
        box-sizing: border-box !important;
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        justify-content: center !important;
        padding: 10px 55px !important;
        color: var(--light) !important;
        transition: all 0.5s ease-in-out !important;
    }
    .btn-pay {
   /*      background-color: var(--dark) !important;
        border: none !important;
        
        
        font-size: 0.8rem !important;
    
     
        box-shadow: 1px 2px 2px 1px rgba(116, 113, 113, 0.5) !important;
        font-weight: bolder !important;
        height: 35px !important; */
        width: 100% !important;
        color: var(--white) !important;
        transition: all 0.5s ease-in-out !important;
        padding: 10px 65px !important;
        border-radius: 15px !important;
        position: relative !important;
        border-radius: 99px !important;
        background-color: #003f88;
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        justify-content: center !important;
        box-sizing: border-box !important;
    }
    .mod-form span
    {
        font-size:13px;
        font-weight:900;
        color: var(--gray-dark);
        height: 50px;
        font-size: 17px !important;
    } .mod-forms span
    {
        font-size:13px;
        font-weight:900;
        color: var(--gray-dark);
        height: 50px;
        font-size: 17px !important;
    }

    .mod-form-5 span {
        font-size: 13px;
        font-weight: 900;
        color: var(--secondary-dark);
    }
       .mod-form-5
    {
        width: 100%;
        display: flex;
        flex-direction: column;
        margin: 10px 15px 25px 15px;
    }

    .mod-form-3  {
        display: flex;
        flex-direction: row;
        gap: 10px;
        width: 100%;
    }

    .mod-form-side span {
        font-size: 15px;
        font-weight: 900;
        color: var(--gray-dark);
    }
    .title
    {
        color: var(--dark);
        font-size: 25px;
        font-weight: bolder;
    }

    .sub-title 
    {
        color: var(--dark);
        font-size: 20px;
        font-weight: bolder;
    }

    .sub-title-2 {
          color: var(--accent);
    font-size: 15px;
    font-weight: bolder;
    margin: 10px;
    }
    .title-content
    {
        margin:25px;
    }
    .card-content
    {
        margin: 25px;
        border: 1px solid #ddd;
        border-radius: 10px;
        /* box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.2); */
        margin: 25px;
        background-color:white !important;
    }
</style>
<div id="feespayment-main-container">
    <div class="fees-main-container">
        <div class="title-content">
            <span class="title">Fees Payment and Details</span>
        </div>
        <div class="card-content">
            <form id="submitform">
            <div style="overflow:hidden">
            <div class="m-3">
                <span class="sub-title">Payment</span>
            </div>
            <div class="content-filter">
                <div class="sub-content-fees">
                    <div class="mod-form">
                        <span class="text-left">Charges</span>
                        <div class="input-container">
                                    <input type="text" value="@formattedTotalDue" id="charge" class="mod-inputs" placeholder="0.00" disabled />
                        </div>
                    </div>
                    <div class="mod-form">
                        <span class="text-left">Credits</span>
                        <div class="input-container">
                                <input type="text" value="" id="search" class="mod-inputs" placeholder="0.00" disabled />
                        </div>
                    </div>
                    <div class="mod-form-5">
                        <span class="text-left" style="font-size: 20px;color:var(--dark);padding-bottom: 5px;height:65px">Total Due</span>
                        <div class="input-container">
                                    <input type="text" value="@formattedTotalDue" id="totaldue" class="mod-inputs-5" placeholder="0.00" disabled />
                        </div>
                    </div>
                    <div class="mod-form">
                        <span class="text-left">Total Payment</span>
                        <div class="input-container">
                                <input type="text" value="" id="totalpayment" class="mod-inputs" placeholder="0.00" disabled />
                        </div>
                    </div>
                    <div class="mod-form">
                        <span class="text-left">Change/Balance</span>
                        <div class="input-container">
                                    <input type="text" value="-@String.Format("{0:0.00}", @formattedTotalDue)" id="balance" class="mod-inputs" placeholder="0.00" disabled />
                        </div>
                    </div>
                </div>
            </div>
                <div class="content-filter-2" >
     
                <div class="sub-content-fees-3" id="textCont1">
                    <div class="mod-form">
                        <span class="text-left" style="
                            text-align: center !important;
                        ">Mode<span style=" color:red;color:red;margin-left: 15px;">*</span></span>
                            <div id="mode-cntr">
                                <select id="mode1" style="width: 100%;margin-top:10px"  onchange="handleChange(1)" class="modeofpayment">
                                    <option value="0" selected>Cash</option>
                                    <option value="1" selected>Cheque</option>
                            </select>
                        </div>
                    </div>
                        <div style="
                            width: 50%;
                            display: flex;
                            flex-direction: column;
                            margin: 15px;
                         ">
                            <span class="text-left" style="
                                  font-size: 13px;
                                  font-weight: 900;
                                  color: var(--gray-dark);
                                  margin-left: 10px;
                                  height: 50px;
                                  ">IT Fee</span>
                            <div id="it-cntr">
                                <input type="checkbox" class="select-checkbox" style="margin-top: 20px;margin-right: 20px;" id="itfee1">
                        </div>
                    </div>
                    <div class="mod-forms">
                        <span class="text-left" style="text-align: center !important;">Currency</span>
                            <div id="currency-cntr">
                            <input type="text" value="PHP" id="currency1" class="mod-input" placeholder=""  disabled />
                        </div>
                    </div>
                    <div class="mod-form">
                            <span class="text-left" style="text-align: center !important;font-size: 20px !important;color: var(--dark);"><span style=" color:red;color:red;margin-right: 15px;">*</span>Amount</span>
                        <div  id="amount-cntr">
                                    <input type="text" value="" id="amount1" class="amount-inputs" placeholder="0.00" oninput="compute(1)" style="color:var(--dark);text-align:right" onblur="ensureTwoDecimals(this)" step="0.01" min="0" />
                        </div>
                    </div>
                    <div class="mod-form" id="chequetype1">
                            <span class="text-left" style="text-align: center !important;"><span style=" color:red;color:red;margin-right: 15px;">*</span>Cheque Type</span>
                        <div class="type-input-container">
                                    <select id="check1" class="checque-list" style="width: 100%;margin-top:10px" hidden >
                                </select>
                        </div>
                    </div>
                    <div class="mod-form">
                            <span class="text-left" style="text-align: center !important;"><span style=" color:red;color:red;margin-right: 15px;">*</span>Reference Number</span>
                        <div class="ref-input-container">
                                    <input type="text" value="" id="refno1" class="ref-inputs" placeholder="" hidden maxlength="15" />
                        </div>
                    </div>
                    <div class="mod-form">
                            <span class="text-left" style="text-align: center !important;margin-right: 30px;"><span style=" color:red;color:red;margin-right: 15px;">*</span>Cheque Date</span>
                            <div id="icon-cntr">
                                <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" id="dateto1" class="mod-inputs" placeholder="Date" hidden style="
                                    width: 100%;
                                    font-size: 20px; "  />
                                <i class="fas fa-minus-circle dynamic-element" id="removeButton1" onclick="removeitem(1)"></i>

                            </div>
                    </div>
                   
                </div>
              
               
           
            </div>
            <div class="content-filter">
                    <div style="margin-left: 30px;gap: 20px;color: var(--dark);width:20%;" id="addInputButton" onclick="addItem(1)">

                        <i class="fas fa-plus-circle"></i><span class="text-left" style="font-size: 15px;font-weight: 900; margin-left:10px; cursor:pointer">Add Mode of Payment</span>

                </div>
                <div style="margin-left: 30px;margin-top:50px">

                    <span class="text-left" style="font-size: 15px;font-weight: 900;color: var(--secondary-dark);">Total</span>
                    
                </div>
                <div class="sub-content-fees">
                    <div class="mod-form">
                        <span class="text-left">Cash</span>
                        <div class="input-container">
                                <input type="text" value="" id="cash" class="mod-inputs" placeholder="0.00" disabled />
                        </div>
                    </div>
                    <div class="mod-form">
                        <span class="text-left">Cheque</span>
                        <div class="input-container">
                                <input type="text" value="" id="cheque" class="mod-inputs" placeholder="0.00" disabled />
                        </div>
                    </div>
                    <div class="mod-form">
                            <span class="text-left">Deposit/Overpayment</span>
                            <div class="input-container">
                                <input type="text" value="" id="overpayment" class="mod-inputs" placeholder="0.00" disabled />
                            </div>
                    </div>
                    <div class="mod-form">
                        
                        <div class="input-container">
                          
                        </div>
                    </div>
                    <div class="mod-form">
                       
                        <div class="input-container">
              
                        </div>
                    </div>


                </div>
                    <div class="sub-content-fees" style=" margin-bottom: 50px;">
                    <div class="mod-form">
                        <div class="input-container">
                        </div>
                    </div>
                    <div class="mod-form">
                       
                        <div class="input-container">
                        </div>
                    </div>
                    <div class="mod-form">

                        <div class="input-container">
                        </div>
                    </div>
                    <div class="mod-form">

                        <div class="input-container">
                        </div>
                    </div>
                    <div class="mod-form-3">

                        <div class="input-container">
                                    <input type="submit" value="CANCEL" id="btn-cancel" class="btn-cancel" name="action"  />
                                    <input type="submit" value="PAY" id="btn-pay" class="btn-pay" name="action" />
                        </div>
                    </div>


                </div>

            </div>
            </div>
                </form>
        </div>
        <div class="card-content">
            <div style="
                    display: flex;
                    width: 100%;
                ">
                <div class="m-3" style="
                        width: 100%;
                    ">
                    <span class="sub-title">Fees Details</span>

                </div>
                <div style="
                    width: 100%;
                    display: flex;
                    justify-content: flex-end;
                    margin: 15px 15px 0px 0px;
                ">
                    <button class="collapsible"><i class="fa-solid fa-chevron-up" style="font-size:25px"></i></button>
                </div>
            </div>
            <div id="collapsibleContent" class="collapsible-content">
                <div class="mod-form">
                    <span class="text-left">List of Charges</span>
                </div>
                <div class="content-filter">
                    <div class="sub-content-fees">

                        <table id="fees_details" class="table table-bordered table-hover w-100">
                            <thead>
                            <th>
                                Fee Code
                            </th>
                            <th>
                                Fee Description
                            </th>
                            <th>
                                Amount
                            </th>
                            <th>
                                Waived Indicator
                            </th>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.TXN_CHARGES)
                                {
                                    decimal.TryParse(item.CHARGED_AMT, out chrgamt); // Convert string to decimal
                                    var formattedchrgamt = chrgamt.ToString("N2", CultureInfo.InvariantCulture);
                                    <tr>
                                        <td style="text-align:left;color:black">@item.FEE_CODE</td>
                                        <td class="amount" style="text-align:right;color:black">@item.FEE_DESC</td>
                                        <td class="amount" style="text-align:right">@formattedchrgamt</td>
                                        <td class="amount" style="text-align:right;color:black">@item.WAIVED_INDICATOR</td>
                                    </tr>
                                }
                            </tbody>

                        </table>
                    </div>
                    <div style="display: flex;
    margin-left: 200px;
">
                        <div class="mod-formd">
                           
                        </div>
                        <div class="mod-formd">
                            <label class="text-left" style="
    font-size: 20px;
">Total</label>
                        </div>
                        <div class="mod-formd">
                            <label class="text-left" style="font-weight:bolder;color:var(--dark);font-size:20px">@formattedTotalDue</label>

                        </div>
                        <div class="mod-formd">

                            <div class="input-container">
                            </div>
                        </div>


                    </div>
                </div>
                
            </div>
        </div>
   </div>
    <div class="fees-side-container" id="stickyColumn" style="
    margin: 85px 0px 0px 0px;0pxcontain
    -intrinsic-block-size: auto 100px;85px 0px 0px
    contain-intrinsic-block-size: auto 100px;
">
        <div class="card-content">
            <div style="overflow-x:auto">
                <div >
            <div class="m-3" >
                <span class="sub-title">Transaction Details</span>
            </div>
                    <div class="m-3" style="
                        border: 2px solid var(--accent);
                        border-radius: 15px;width:100px;text-align:center;
                        margin: 10px;
                    ">
                    <span class="sub-title-2" id="status"></span>
                </div>
                </div>
            <div class="sub-content-sidebar">
                <div class="mod-form-side">
                    <span class="text-left">Transaction ID</span>
                    <div class="input-container" >
                            <input type="text" value="@Model.TXN_ID" id="transid" class="mod-inputs-side" placeholder="Transaction ID" disabled />
                    </div>
                </div>
                <div class="mod-form-side">
                    <span class="text-left">Transaction Code</span>
                    <div class="input-container">
                            <input type="text" value="@Model.TXN_CODE" id="transcode" class="mod-inputs-side" placeholder="Transaction Code" disabled />
                    </div>
                </div>
                <div class="mod-form-side">
                    <span class="text-left">Date</span>
                    <div class="input-container">
                            <input type="text" value="@Model.TXN_DATE" id="date" class="mod-inputs-side" placeholder="Date" disabled />
                    </div>
                </div>
                <div class="mod-form-side">
                    <span class="text-left">Customer Name</span>
                    <div class="input-container">
                            <input type="text" value="@Model.CUST_NAME" id="customername" class="mod-inputs-side" placeholder="Customer Name" disabled />
                    </div>
                </div>
                <div class="mod-form-side">
                    <span class="text-left">OR Number</span>
                    <div class="input-container">
                            <input type="text" value="" id="ornum" class="mod-inputs-side" placeholder="OR Number" disabled />
                    </div>
                </div> 
                

            </div>
            </div>
       </div>
    
       
    </div>


</div>
<div class="modal fade" id="alertmodal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="img-header">
                    <img id="modalImage" src="/img/SUCCESS.webp" alt="Modal Image" />
                </div>
                @*  *@
                <h5 class="modal-title" id="modal-title"></h5>
            
            </div>
            <div class="modal-body">
                <div style="
                        width: 100%;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                    ">
                    <span id="validation">ERROR</span>
                    <span id="message"></span>
                </div>
               
            </div>  
            <div style="display: flex;gap: 10px;width: 100%;justify-content: center;margin:30px 0px">
            <div class="input-container-button">
            </div>
            </div>
        </div>
    </div>
</div>
    @section Scripts {
        <script>
        $(document).ready(function () {
            datevalidation();
            var message = "";
            var status = "";
            var tableId = '#example2';
            document.getElementById("mode1").selectedIndex = 0;
            if (!$.fn.dataTable.isDataTable(tableId)) {
                $(tableId).DataTable({
                    "ordering": false // Example configuration
                });
            }

            document.querySelectorAll('input[type="number"]').forEach(function (input) {
                input.addEventListener('keydown', function (event) {
                    // Prevent the input of 'e', '+', '-', and prevent copy-pasting these
                    if (event.key === 'e' || event.key === '+' || event.key === '-' || event.key === 'E') {
                        event.preventDefault();
                    }
                });
            });
            document.getElementById('mode1').selectedIndex = 0;
            checklist();
            
        });
       
        function process_payment() {
           //   loadModal('/Dashboard/PrintOR?transid=' + localStorage.getItem('ornum'), '#defaultmodal', 'PRINT OFFICIAL RECEIPT OR', 'xl', false)

            var cus_id = "@Model.CUSTOMER_ID";
            var data = {};
            data.TXN_ID = localStorage.getItem('MV');
            data.TXN_CODE = localStorage.getItem('transcode');
            data.CUSTOMER_NAME = localStorage.getItem('customername');
            data.CUSTOMER_ID = cus_id;
            data.AMOUNT = $("#totaldue").val();
            data.Date = $("#date").val();
          //  console.log(data);
            $.ajax({
                url: "/Dashboard/SavePayment",
                data: {
                    data: data
                },
                type: "POST",
                datatype: "json"
            })
                .done(function (data) {
                   // console.log(data.stats);
                    $("#ornum").val(data.stats);
                    localStorage.setItem('ornum', data.stats);
                    if ($('#ornum').val()) {
                        document.getElementById('status').textContent = "Paid";
                    } else {
                     //   console.log("Input is empty");
                    }
                  
                   
                    // console.log(selectedIndex);
                    $("#alertmodal").modal('hide');
                    $('#submitform input, #submitform textarea, #submitform select').attr('disabled', 'disabled');
                    $('#btn-cancel').removeAttr('disabled');
                    loadModal('/Dashboard/PrintOR?ornum=' + localStorage.getItem('ornum'), '#defaultmodal', 'PRINT OFFICIAL RECEIPT OR', 'xl', false)

                });
           

        }
      
        var stickyWidth = 0;
        document.addEventListener('DOMContentLoaded', function () {
            var column = document.getElementById('stickyColumn');
            var parentWidth = column.offsetWidth;
            stickyWidth = parentWidth;
        });

        var scrollCount = 0;

        $(window).scroll(function () {
            var element = document.getElementById('stickyColumn');
            // var divWidth = document.getElementById("feespayment-main-container").offsetWidth;  // Includes padding, borders, scrollbar
            // or
            var divWidth = document.getElementById("feespayment-main-container").clientWidth;   // Includes padding, excludes borders, scrollbar
            const isActive = localStorage.getItem('sidebar-active') === 'true';
            const sidebar = document.getElementById('mysidebar');
            const dashboaradsidebar = document.getElementById('dashboard-main-container') == null ? document.getElementById('feespayment-main-container') : document.getElementById('dashboard-main-container');

            //console.log(divWidth);
            if ($(this).scrollTop() > 180) { // Adjust scroll position as needed
                scrollCount += 1;

                if (scrollCount == 1) {
                    element.style.position = 'fixed';
                    element.style.width = '30%';
                    element.style.grid = "data10";
                    var colStyles = window.getComputedStyle(element);
                    var rightValue = colStyles.getPropertyValue('right');
                    //console.log(rightValue);
                    var rightValueInt = parseInt(rightValue, 10);
                    element.style.left = rightValueInt + 85+ 'px';
                    element.style.top = '20px';
          
                    element.style.margin = '0px 0px 0px 0px';
                   
                }


            } else {
                element.style.removeProperty('position');
                element.style.removeProperty('width');
                element.style.removeProperty('right');
                element.style.removeProperty('left');
                element.style.removeProperty('top');
                element.style.margin = '85px 0px 0px 0px';
                scrollCount = 0;
                sidebar.classList.remove('active');
                dashboaradsidebar.classList.remove('active');
            }
        });
        //--End Sticky on Scroll
        function handleChange(count) {
            const dateto = document.getElementById('dateto' + count);
            const check = document.getElementById('check' + count);
            const refno = document.getElementById('refno' + count);
            const selectElement = document.getElementById('mode' + count)
            const chequeopt = document.getElementById('chequetype' + count)
            const dynamicId = 'removeButton' + count;
            const amountid = 'amount' + count;
            const rmvbtn = document.getElementById(dynamicId);
       
            const selectedValue = selectElement.value;
          //  console.log(selectedValue);
      
           // console.log('Selected Value:', selectedValue)
          //
            switch(selectedValue)
            {
                
                case "1":
                  $('#amount' + count).attr('class', 'chequeamount');
           
                break

                default:
                    $('#amount' + count).attr('class', 'amount-inputs');
                break
            }
            if (selectedValue =="1") {
                dateto.hidden = false;
                check.hidden = false;
                refno.hidden = false;
                $('#refno' + count).attr('required', true);
                $('#check' + count).attr('required', true);
                rmvbtn.style.margin = "20px 0px 0px 0px";
                rmvbtn.style.color = "red";
                rmvbtn.style.cursor = "pointer";
                chequeopt.style.margin = "15px 0px 15px 0px";

            } else if (selectedValue == "0") {
                dateto.hidden = true;
                check.hidden = true;
                refno.hidden = true;
                rmvbtn.style.margin = "20px 0px 0px 150px";
                rmvbtn.style.color = "red";
                rmvbtn.style.cursor = "pointer";
                chequeopt.style.margin= "";

            }
        }
        var textcontainer = $(".content-filter-2");
        var textcounter = $(".content-filter-2 .sub-content-fees-3").length;

        function removeitem(count) {
            let cash_val, cheque_val,cash,cheque;
         //   console.log($("#textCont" + count))
            if (count == 1) {
                $("#mode-cntr").remove();
                $("#it-cntr").remove();
                $("#currency-cntr").remove();
                $("#amount-cntr").remove();
                $("#input-container").remove();
                $("#icon-cntr").remove();
                let cash = 0;
                $('.amount-inputs').each(function () {
                    let cash_val = removeCommas($(this).val());
                    console.log(cash_val);
                    cash += parseFloat(cash_val) || 0;
                });
                // alert(cash);
                let formattedSum = formatWithCommas(cash.toFixed(2));
                let cheque = 0;
                $('.chequeamount').each(function () {
                    let cheque_val = removeCommas($(this).val());
                    console.log(cheque_val);
                    cheque += parseFloat(cheque_val) || 0;
                });
                // alert(cheque);
                sum = cash + cheque;

                const value2 = parseFloat(removeCommas($('#totaldue').val())) || 0;
                const difference = sum - value2;
                if (difference > 0) {
                    // Set difference to zero and put the excess in the excess field
                    $("#balance").val("0.00");
                    // $("#overpayment").val(difference.toFixed(2));
                } else {
                    // If there's no excess, show the difference and clear the excess field
                    $("#balance").val(difference.toFixed(2));
                    // $("#overpayment").val("0.00");
                }
                $('#cash').val(formattedSum);
                $('#cheque').val(formatWithCommas(cheque.toFixed(2)));
                $('#totalpayment').val(formatWithCommas(sum.toFixed(2)));
                $('#balance').val(formatWithCommas(difference.toFixed(2)));
            }
            else
            {
                $("#textCont" + count).remove();
                let cash = 0;
                $('.amount-inputs').each(function () {
                    let cash_val = removeCommas($(this).val());
                    console.log(cash_val);
                    cash += parseFloat(cash_val) || 0;
                });
                // alert(cash);
                let formattedSum = formatWithCommas(cash.toFixed(2));
                let cheque = 0;
                $('.chequeamount').each(function () {
                    let cheque_val = removeCommas($(this).val());
                    console.log(cheque_val);
                    cheque += parseFloat(cheque_val) || 0;
                });
                // alert(cheque);
                sum = cash + cheque;
                const value2 = parseFloat(removeCommas($('#totaldue').val())) || 0;
                const difference = sum - value2;
                if (difference > 0) {
                    // Set difference to zero and put the excess in the excess field
                    $("#balance").val("0.00");
                    // $("#overpayment").val(difference.toFixed(2));
                } else {
                    // If there's no excess, show the difference and clear the excess field
                    $("#balance").val(difference.toFixed(2));
                    // $("#overpayment").val("0.00");
                }
                $('#cash').val(formattedSum);
                $('#cheque').val(formatWithCommas(cheque.toFixed(2)));
                $('#totalpayment').val(formatWithCommas(sum.toFixed(2)));
                $('#balance').val(formatWithCommas(difference.toFixed(2)));
            }
           
        }

        function formatWithCommasAndDecimals(value) {
            value = value.replace(/[^0-9.]/g, '');

            // Allow only one decimal point
            const parts = value.split('.');
            if (parts.length > 2) {
                value = parts[0] + '.' + parts.slice(1).join('');
            }

            // Format with commas for the integer part
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            // Join integer and decimal parts
            return parts.join('.');
        }

        // Function to remove non-numeric characters except decimal points
        function removeNonNumeric(value) {
            return value.replace(/[^0-9.]/g, '');
        }
        function removeCommas(value) {
            return value.replace(/,/g, ''); // Remove all commas
        }

        // Function to format a number with commas
        function formatWithCommas(value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        function ensureTwoDecimals(input) {
            let value = input.value.replace(/,/g, ''); // Remove commas to get the raw number
            if (!isNaN(value) && value !== '') {
                input.value = Number(value).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            } else {
                input.value = '0.00'; // Default value if input is invalid
            }
        }
        function compute(count) {
            let cash = 0;
            let cheque = 0;
            let sum = 0;
            // Get the value from the first input field
            const paymentType = $('#mode'+count).val();

            let value = $('#amount' + count).val();
            const cash_ = $('#amount' + count).val();
            const cheque_ = $('#chequeamount' + count).val();
            value = removeNonNumeric(value); // Clean up the value

            // If the value is valid, format it with commas and decimals
            if (value !== '') {
                var formattedValue = formatWithCommasAndDecimals(value);
                $('#amount' + count).val(formattedValue); // Update the input field with formatted value
            } else {
                $('#amount' + count).val(''); // Clear if the input is invalid
            }
            let parts = value.split('.');
            let integerPart = parts[0];
            let decimalPart = parts[1] ? parts[1].substring(0, 2) : '';  // Limit to 2 decimal places

            // Format the integer part with commas (thousands separators)
            integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

            // If there's a decimal part, combine it back, otherwise just return the integer part
           var result = decimalPart ? `${integerPart}.${decimalPart}` : integerPart;
            // console.log(result);
            $('#amount' + count).val().value = result;
            $('.amount-inputs').each(function () {
                let value = removeCommas($(this).val());
                cash += parseFloat(value) || 0;
            });
            let formattedSum = formatWithCommas(cash.toFixed(2));

            $('.chequeamount').each(function () {
                let value = removeCommas($(this).val());
                cheque += parseFloat(value) || 0;
            });
            sum = cash + cheque;
            const value1 = parseFloat(removeCommas($('#amount' + count).val())) || 0;
            const value2 = parseFloat(removeCommas($('#totaldue').val())) || 0;
            const difference = sum - value2;
            if (difference > 0) {
                // Set difference to zero and put the excess in the excess field
                $("#balance").val("0.00");
                // $("#overpayment").val(difference.toFixed(2));
            } else {
                // If there's no excess, show the difference and clear the excess field
                $("#balance").val(difference.toFixed(2));
                // $("#overpayment").val("0.00");
            }
           // console.log(cash);

            $('#cash').val(formattedSum);
            $('#cheque').val(formatWithCommas(cheque.toFixed(2)));
            $('#totalpayment').val(formatWithCommas(sum.toFixed(2)));
            $('#balance').val(formatWithCommas(difference.toFixed(2)));
        }
            function addItem(count) { 

            var htmlContent = `<div class="sub-content-fees-3" id="textCont${textcounter + 1}">
                            <div class="mod-form">
                     
                                <div id="mode-cntr">
                                              <select id="mode${textcounter + 1}" style="width: 100%;margin-top:10px"  onchange="handleChange('${textcounter + 1}')"  class="modeofpayment">
                                        <option value="0" selected>Cash</option>
                                        <option value="1">Cheque</option>
                                    </select>
                                </div>
                            </div>
                            <div style="width: 50%; display: flex; flex-direction: column; margin: 15px;">
                          
                                <div id="it-cntr">
                                                    <input type="checkbox" class="select-checkbox" style="margin-top: 20px;margin-right: 20px;" id="itfee${textcounter + 1}">
                                </div>
                            </div>
                                  <div class="mod-forms">
                              
                                    <div id="currency-cntr">
                                            <input type="text" value="PHP" id="currency${textcounter + 1}" class="mod-input" placeholder=""  disabled />
                                </div>
                            </div>
                            <div class="mod-form">
             
                                <div id="amount-cntr">
                                                                            <input type="text" value="" id="amount${textcounter + 1}" class="amount-inputs" placeholder="0.00" oninput="compute('${textcounter + 1}')"  style="color:var(--dark);text-align:right" onblur="ensureTwoDecimals(this)" step="0.01" min="0"/>
                                </div>
                            </div>
                                    <div class="mod-form" id="chequetype${textcounter + 1}">
                        
                                <div class="type-input-container">
                                                       <select id="check${textcounter + 1}" class="checque-list"  style="width: 100%;margin-top:10px" hidden >
                                </select>
                                </div>
                            </div>
                            <div class="mod-form">
                           
                                <div class="ref-input-container">
                                                                 <input type="text" value="" id="refno${textcounter + 1}" class="ref-inputs" placeholder="" hidden  maxlength="15"/>
                                </div>
                            </div>
                                     <div class="mod-form">
                          
                                <div id="icon-cntr">
                                                        <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" id="dateto${textcounter + 1}" class="mod-inputs" placeholder="Date" hidden style="
                                            width: 100%;
                                            font-size: 20px;
                                        " />
                                                                          <i class="fas fa-minus-circle dynamic-element"  id="removeButton${textcounter + 1}" onclick="removeitem('${textcounter + 1}')"></i>

                                    </div>
                            </div>
                                    </div>
                        `;

            textcontainer.append(htmlContent);
            textcounter = textcounter + 1;
           // console.log(textcounter);
            checklistcount(textcounter);
                datevalidation();
            }
        function addItFeeComputation(amountValue, amountInputId, textcounters) {
            const value1 = parseFloat(removeCommas('@ViewBag.ChargeAmount')) || 0;
            const value2 = parseFloat(removeCommas(amountValue)) || 0;
            const difference = value1 - value2;
            const positiveDifference = Math.max(0, difference);

            // Now you can use positiveDifference as needed
           // console.log(positiveDifference);
            var htmlContent = `<div class="sub-content-fees-3" id="textCont2">
                                    <div class="mod-form">

                                        <div id="mode-cntr">
                                                      <select id="mode2" style="width: 100%;margin-top:10px"  onchange="handleChange(2)"  class="modeofpayment">
                                                <option value="0" selected>Cash</option>
                                                <option value="1">Cheque</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div style="width: 50%; display: flex; flex-direction: column; margin: 15px;">

                                        <div id="it-cntr">
                                                                    <input type="checkbox" class="select-checkbox" style="margin-top: 20px;margin-right: 20px;" id="itfee${textcounters}" checked>
                                        </div>
                                    </div>
                                          <div class="mod-forms">

                                            <div id="currency-cntr">
                                                    <input type="text" value="PHP" id="currency2" class="mod-input" placeholder=""  disabled />
                                        </div>
                                    </div>
                                    <div class="mod-form">

                                        <div id="amount-cntr">
                                                    <input type="number" value="" id="amount${textcounters}" class="amount-inputs" placeholder="0.00" oninput="compute(2)"  style="color:var(--dark);text-align:right" onblur="ensureTwoDecimals(this)" step="0.01" min="0"/>
                                        </div>
                                    </div>
                                            <div class="mod-form" id="chequetype2">

                                        <div class="type-input-container">
                                             <select id="check2" class="checque-list"  style="width: 100%;margin-top:10px" hidden >
                                        </select>
                                        </div>
                                    </div>
                                    <div class="mod-form">

                                        <div class="ref-input-container">
                                                                         <input type="text" value="" id="refno2" class="ref-inputs" placeholder="" hidden  maxlength="15"/>
                                        </div>
                                    </div>
                                             <div class="mod-form">

                                        <div id="icon-cntr">
                                                                <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" id="dateto2" class="mod-inputs" placeholder="Date" hidden style="
                                                    width: 100%;
                                                    font-size: 20px;
                                                " />
                                                                                  <i class="fas fa-minus-circle dynamic-element"  id="removeButton2" onclick="removeitem(2)"></i>

                                            </div>
                                    </div>
                                            </div>
                                `;

            textcontainer.append(htmlContent);
            textcounter = textcounter + 1;
            // console.log(textcounter);
            checklist();
            datevalidation();
            var chrg = '@ViewBag.ChargeAmount';
            $("#amount" + textcounters).val(parseFloat(chrg).toFixed(2));
            $(`#${amountInputId}`).val(formatWithCommas(Math.abs(parseFloat(difference)).toFixed(2)));
        }


        // localStorage.removeItem('myDataKey');
            var table = $("#example2").DataTable({
                "paging": true,
                "lengthChange": false,
                "searching": false,
                "ordering": true,
                "info": true,
                "autoWidth": false,
                "responsive": true,
            })
        document.addEventListener("DOMContentLoaded", function () {
            var content = document.getElementById("collapsibleContent");
            var button = document.querySelector(".collapsible");
            var icon = button.querySelector("i");
                button.addEventListener("click", function () {
                    if (icon.classList.contains("fa-chevron-up")) {
                        icon.classList.remove("fa-chevron-up");
                        icon.classList.add("fa-chevron-down");

                        content.style.display = "none";

                    } else {
                        content.style.display = "block";
                        icon.classList.remove("fa-chevron-down");
                        icon.classList.add("fa-chevron-up");
                    }
                });
            
        });
        var dateStr = localStorage.getItem('date'); // Date in DD-MM-YYYY format

        // Convert the date to YYYY-MM-DD format
        var parts = dateStr.split('-'); // Split by '-'
        var month = parts[0]; // MM
        var day = parts[1]; // dd
        var year = parts[2]; // yyyy

        var formattedDate = month + '-' + day + '-' + year;

        // Set the date value in the input
        $('#dateInput').val(formattedDate);
        // $("#transid").val(localStorage.getItem('MV'));
        // $("#status").text(localStorage.getItem('status'));
        // $("#charge").val(localStorage.getItem('totaldue'));
        // $("#balance").val("-"+localStorage.getItem('totaldue'));
        $("#transcode").val(localStorage.getItem('transcode'));
        $("#date").val(formattedDate);
        $("#customername").val(localStorage.getItem('customername'));
        $("#status").text(localStorage.getItem('status'));

      
        $("#submitform").on("submit", function (event) {
            event.preventDefault();
            var action = $(document.activeElement).val();
            // console.log(action);
            const divs = document.querySelectorAll('div.sub-content-fees-3'); // Replace 'your-div-class' with the actual class of your divs

            const checkedValues = [];
            const uncheckedValues = [];
            let selectedMode ="";
            var isduplicate = false;

            let modeselect;
            let amountInputElement;
            let amountInputId;
            let checkbox;
            let amountValue;
            let itId;
            let chk_modeselect;
            let chk_amountInputElement;
            let chk_amountInputId;
            let chk_checkbox;
            let chk_checkbox_id;
            let chk_amountValue;
            let total_unchk_cash;
            let totalAmount = 0;
            let chk_totalAmount = 0;
            let amountInput;
            let itValue;
            let itClass;
            let chk_typeCntr;
            let chk_typeCntr_class;
            if (action === "PAY") {
                var checkboxes = document.querySelectorAll(".select-checkbox");
                const totaldue_ = parseFloat(removeCommas($('#totaldue').val()));
                const balance = parseFloat(removeCommas($('#balance').val()));
                const totalpayment_ = parseFloat(removeCommas($('#totalpayment').val()));
                const cheque = parseFloat(removeCommas($('#cheque').val()));
                const amountToCompare = '@ViewBag.ChargeAmount';
                const Feedesc = '@ViewBag.FeeDesc';
                // console.log(Feedesc);
               // console.log(totaldue_ + " " + totalpayment_);
               // console.log(amountToCompare);
                var textcounter = $(".content-filter-2 .sub-content-fees-3").length;
                var isChecked = false;
                var selectElement = document.querySelector('.modeofpayment');
             
                    var selectElements = document.querySelectorAll('.modeofpayment');
                    var allSelectedValues = [];

                    selectElements.forEach(function (selectElement) {
                        var selectedOptions = Array.from(selectElement.selectedOptions);
                        var selectedValues = selectedOptions.map(option => option.value);
                        allSelectedValues = allSelectedValues.concat(selectedValues);
                    });

                    if (allSelectedValues.length > 0) {
                    } else {
                    }
           
                var selectedIndex = selectElement.selectedIndex;
                checkboxes.forEach(function (checkbox) {
                    if (checkbox.checked) {
                        isChecked = true;
                       
                    }
                    // console.log(isChecked);
                });

                var stats = "";
                if (selectedIndex === 0) {
                    stats = "cash";
                }
                else {
                    stats = "cheque";
                }
             
                var selectElements = document.querySelector('.modeofpayment');
                var checkboxes = document.querySelectorAll(".select-checkbox");
                var checkedCount = 0;
                var uncheckedCount = 0;

                for (var i = 0; i < checkboxes.length; i++) {
                    if (checkboxes[i].checked) {
                        checkedCount++;
                    } else {
                        uncheckedCount++;
                    }
                }

                

                divs.forEach(div => {
                    const checkbox = div.querySelector('input[type="checkbox"]');
                    if (checkbox) {
                        const divValue = div.textContent.trim(); 

                        if (checkbox.checked) {
                            checkedValues.push(divValue);
                        } else {
                            uncheckedValues.push(divValue);
                        }
                    }
                });
                const subContentFeesElements = document.querySelectorAll('.sub-content-fees-3');
                let duplicateCount = 0;
                subContentFeesElements.forEach((element, index) => {
                    const parentId = element.id;
                    const amountCntr = element.querySelector('#amount-cntr');
                    const itCntr = element.querySelector('#it-cntr');
                    const typeCntr = element.querySelector('.type-input-container');
                    const refCntr = element.querySelector('.ref-input-container');
            
                    if (typeCntr && refCntr) {
                        // Get the input values
                        const typeValue = typeCntr.querySelector('select').value; // Assuming type is a select element
                        const refValue = refCntr.querySelector('input').value;

                        subContentFeesElements.forEach((element2, index2) => {
                            let parentId2 = element2.id;
                            let amountCntr2 = element2.querySelector('#amount-cntr');
                            let itCntr2 = element2.querySelector('#it-cntr');
                            let typeCntr2 = element2.querySelector('.type-input-container').querySelector('select').value;
                            let refCntr2 = element2.querySelector('.ref-input-container').querySelector('input').value;


                            if (parentId != parentId2) {

                                // console.log('parentId', parentId, parentId2);
                                // console.log('typeCntr', typeValue, typeCntr2);
                                // console.log('refCntr', refValue, refCntr2);

                                if (typeValue == typeCntr2 && refValue == refCntr2 && typeValue != '' && typeCntr2 != '')
                               
                                    duplicateCount++;
                                   
                            }

                        });
                        // console.log(typeValue + " , " + refValue);
                        // // Compare with previous elements
                        // for (let i = 0; i < index; i++) {
                        //     const previousTypeCntr = subContentFeesElements[i].querySelector('.type-input-container');
                        //     const previousRefCntr = subContentFeesElements[i].querySelector('.ref-input-container');
                        
                        //     // Validate if previous elements are not null
                        //     if (previousTypeCntr && previousRefCntr) {
                   
                        //         const previousTypeValue = previousTypeCntr.querySelector('select').value;
                        //         const previousRefValue = previousRefCntr.querySelector('input').value;
                        //         console.log(typeValue + " , " + refValue);
                        //         console.log(previousTypeValue + " , " + previousRefValue);
                        //         if ((typeValue === previousTypeValue && refValue === previousRefValue) ||
                        //             (typeValue === previousRefValue && refValue === previousTypeValue)) 
                        //             {
                        //                 isduplicate = true;
                                    
                        //                 break;
                        //             }
                                   
                        //     }
                        // }


                    } 
                    else {
                        duplicateCount = 0;
                        // console.log("Type or Ref container not found");
                    }
                    amountInput = amountCntr.querySelector('input');
                    itValue = itCntr.querySelector('input');
                    amountInputId = amountInput.id;
                    itId = itValue.id;
                    amountInputClass = amountInput.className;
                    itClass = itId.className;
                    checkbox = element.querySelector('.select-checkbox');
                    chk_typeCntr = typeCntr.querySelector('select');
                    chk_typeCntr_class = chk_typeCntr.className;
                    // console.log(duplicateCount);
                    if (duplicateCount > 0)
                    {
                        isduplicate = true;
                    }
                    else
                    {
                       
                        isduplicate = false;

                    }
                    duplicateCount = 0;
                    if (checkbox.checked) {

          
                        
                         chk_checkbox = element.querySelector(`.${itClass}`);
                         chk_modeselect = element.querySelector('.modeofpayment');
                         chk_amountInputElement = element.querySelector(`.${amountInputClass}`);
                         chk_amountInputId = chk_amountInputElement.id;
                         chk_checkbox_id = checkbox.id;
                         chk_amountValue = parseFloat(removeCommas($(`#${chk_amountInputId}`).val()));
                         chk_selectedMode = chk_modeselect.value;
                        // chk_amountValue += parseFloat($(`#${chk_amountInputId}`).val()) || 0;
                         chk_totalAmount += parseFloat(chk_amountValue) || 0;
                        // if (isduplicate != 0) {
                        //     modalmessage('duplicate', 0);
                        // } else if (selectedMode == 0) {

                        //     addItFeeComputation(amountValue, amountInputId, textcounter + 1);
                        // } else {
                        //     if (amountToCompare > totalpayment_) {
                        //         modalmessage('insufficient', 0);

                        //     } else {
                        //         modalmessage('success');
                        //     }
                        //     // modalmessage('duplicate', selectedMode);
                        // }
                     
                        // checkbox.checked = false;
                       
                    }
                    else {
                         modeselect = element.querySelector('.modeofpayment');

                        selectedMode = modeselect.value;
                        amountInputElement = element.querySelector(`.${amountInputClass}`);
                        amountInputId = amountInputElement.id;
                        amountValue = parseFloat(removeCommas($(`#${amountInputId}`).val()));
                        // total_unchk_cash += parseFloat(amountValue);

                    
                        totalAmount += parseFloat(amountValue) || 0;
                       
                        // alert('Checked Amount: ' + amountValue + " the selected mode is " + selectedMode);
                    }
                    
                   
                   
                    const uncheckedDivIds = [];
                    const allDivIds = [];

                    subContentFeesElements.forEach(element => {
                        const checkbox = element.querySelector('.select-checkbox');

                        if (!checkbox.checked) {
                            const parentId = element.id;

                            uncheckedDivIds.push(parentId);
                        }

                        const divsWithIds = element.querySelectorAll('div[id]');

                        divsWithIds.forEach(div => {
                            allDivIds.push(div.id);
                        });
                    });
                 


                });
      
                // console.log("Checked checkboxes:", checkedCount);
                if (checkedCount == 0) {
                    if(textcounter > 1)
                    {
                        modalmessage('valid it fee', 0);
                     
                    }
                    else {

                        addItFeeComputation(formatWithCommas(totalAmount.toFixed(2)), 'amount1', textcounter + 1);
                        modalmessage('success', 0);
                    }
                   
                }

                var amount_prompt = chk_selectedMode == 0 ? "Cash" : "Cheque";
                var unchk_amount_prompt = selectedMode == 0 ? "Cash" : "Cheque";
                // alert('Checked Amount: ' + chk_totalAmount + " the selected mode is " + selectedMode);
                // alert(isduplicate);
                if(isduplicate == true)
                {
                    modalmessage('duplicate', 0);
                }
                else if (checkedCount != 0) {
                    const userInput = parseFloat($('#totalpayment').val());
                    var result = validateRefInputValues();
                    var deducted = parseFloat(amountToCompare) + parseFloat(totalAmount);
                    var deducted_totaldue = parseFloat(totaldue_) - parseFloat(amountToCompare);
                    // alert(deducted + ", " + totaldue_);
                    if (!isNaN(userInput)) {
                        var itemselected = allSelectedValues.join(', ');
                        // console.log(itemselected);
                        // alert(itemselected)
                     
                        if (chk_selectedMode == 1) {
                            if (chk_totalAmount > amountToCompare) {
                              
                                modalmessage('amount < pf', amount_prompt);
                            }
                            else if(chk_totalAmount < amountToCompare )
                            {
                                modalmessage('insufficient');
                            }
                            else {
                              
                                itemsselected(itemselected, totaldue_, totalpayment_, amount_prompt);
                               
                            }
                        }
                        else {
                            if (chk_totalAmount < amountToCompare) {
                           
                                modalmessage('insufficient', 0);
                            }
                            else if (chk_totalAmount > amountToCompare) {

                                itemsselected(itemselected, chk_totalAmount, totalpayment_, amount_prompt, amountToCompare, totaldue_);
                                addItFeeComputation(chk_totalAmount, chk_amountInputId, textcounter + 1);
                                checkbox = document.getElementById(chk_checkbox_id);
                                checkbox.checked = false;
                            }
                            else if (deducted > totaldue_)
                            {
                                modalmessage('amount < of', unchk_amount_prompt);
                            }
                            else  {
                                if (totaldue_ > totalpayment_)
                                {
                                    modalmessage('insufficient');
                                }
                                else
                                {
                                    itemsselected(itemselected, chk_totalAmount, totalpayment_, amount_prompt, amountToCompare, totaldue_);
                                }

                            }
                        }
                       
                        // itemsselected(itemselected, cash, totalpayment_);

                    }
                    else {
                        modalmessage('valid numbers', selectedMode);
                    }
                }
                else {
                    modalmessage('valid it fee', selectedMode);
                }
            
            }
            else if(action === 'CANCEL') { 
                window.location.href = '/Dashboard/Index';
            }
        });
        function modalmessage(value, mode) {
            let message, validation, status;
            switch (value) {
                case 'success':
                    message = 'Are you ready to complete your transaction and proceed with the payment?';
                    validation = 'Payment Confirmation';
                    status = '<img id="modalImage" src="/img/SUCCESS.webp" alt="Modal Image" />';
                    break;
                case 'valid it fee':
                    message = 'IT Fee is required!';
                    validation = 'Warning';
                    status = '<img id="modalImage" src="/img/ERROR.webp" alt="Modal Image" />';
                    break;
                case 'valid numbers':
                    message = 'Please enter valid numbers in both fields.';
                    validation = 'Warning';
                    status = '<img id="modalImage" src="/img/ERROR.webp" alt="Modal Image" />';
                    break;
                case 'insufficient':
                    message = 'Payment is Insufficient';
                    validation = 'Warning';
                    status = '<img id="modalImage" src="/img/ERROR.webp" alt="Modal Image" />';
                    break;
                case 'amount < pf':
                    message = 'The '+ mode +' Amount entered should not be greater than the amount of Processing Fee';
                    validation = 'Warning';
                    status = '<img id="modalImage" src="/img/ERROR.webp" alt="Modal Image" />';
                    break;
                case 'duplicate':
                    message = 'Duplicate Cheque and Ref No. Check the entered value and input again';
                    validation = 'Warning';
                    status = '<img id="modalImage" src="/img/ERROR.webp" alt="Modal Image" />';
                    break;
                    
                case 'amount < of':
                    message = 'The '+ mode +' Amount entered should not be greater than the amount of Operations Fee';
                    validation = 'Warning';
                    status = '<img id="modalImage" src="/img/ERROR.webp" alt="Modal Image" />';
                    break;

                default:
                    message = 'Are you ready to complete your transaction and proceed with the payment?';
                    validation = 'Payment Confirmation';
                    status = '<img id="modalImage" src="/img/SUCCESS.webp" alt="Modal Image" />';
            }
       
            // Elements selection
            const elements = document.querySelectorAll(".modal-header");
            const contents = document.querySelectorAll(".modal-content");
            const modalSpans = document.querySelectorAll(".modal-header span");

            // Buttons setup
            const payButton = '<input type="submit" value="YES" id="btn-process" class="btn-pay" onclick="process_payment()"/>';
            const cancelButton = '<input type="submit" value="NO" id="btn-cancel" class="btn-NO" data-dismiss="modal"/>';
            const cancelButton2 = '<input type="submit" value="CANCEL" id="btn-cancel" class="btn-NO" data-dismiss="modal"/>';

            // Clear and append buttons based on validation
            $('.input-container-button').empty();
            if (validation !== 'Payment Confirmation') {
                $('.input-container-button').append(cancelButton2);
            } else {
                $('.input-container-button').append(cancelButton);
                $('.input-container-button').append(payButton);
            }

            // Update modal content styles
            contents.forEach(content => {
                const borderColor = validation === 'Payment Confirmation' ? 'var(--dark)' : '#d03a4b';
                content.style.setProperty("border-radius", "15px 15px 15px 15px", "important");
                content.style.setProperty("border-bottom", `7px ${borderColor} solid`, "important");
            });

            // Update modal header styles
            elements.forEach(element => {
                const backgroundColor = validation === 'Payment Confirmation' ? 'var(--dark)' : '#d03a4b';
                element.style.setProperty("color", "white", "important");
                element.style.setProperty("background-color", backgroundColor, "important");
                element.style.setProperty("border-radius", "15px 15px 0 0", "important");
                element.style.setProperty("text-align", "center", "important");
            });

            // Update modal spans
            modalSpans.forEach(span => {
                span.style.setProperty("text-align", "center", "important");
                span.style.setProperty("width", "100%", "important");
            });

            // Display the message in the alert modal
            // alert(message + "<br>" + validation + "<br>" + status + value);

            document.getElementById('message').textContent = message;
            document.getElementById('validation').textContent = validation;

            // Show modal
            $("#alertmodal").modal('show');
        }
        function itemsselected(value, cash, totalpayment_, amount_prompt, amountToCompare, totaldue_) {
                // console.log(value);
                switch (value) {
                    case '0':
                        if (cash < totalpayment_) {
                            modalmessage('insufficient');
                        } else {
                            modalmessage('success');
                        }
                        break;
                    case '1, 1':
                        if (cash > totalpayment_) {
                            modalmessage('insufficient');
                        } 
                        else if (cash < totalpayment_) {
                        // alert(amount_prompt);
                        modalmessage('amount < of', amount_prompt);
                        } 
                        else {
                            modalmessage('success');
                        }
                        break;
                    case '1, 0':
                    case '0, 1':
                       
                        if (cash > totalpayment_) {
                            modalmessage('insufficient');
                        }
                        else {
                            modalmessage('success');
                        }
                        break;
                    case '1, 0, 1':
                    case '0, 1, 1':
                    case '1, 1, 0':
                    case '0, 1, 0':
                    case '0, 0, 1':
                    case '1, 0, 0':
                    // alert(cash + " , " + totalpayment_ +" " + totaldue_ +"-" +amountToCompare)
                    if (amountToCompare < cash) {
                        modalmessage('amount < pf', 'Cash and Cheque');
                    }
                    else if (amountToCompare > cash)
                    {
                         modalmessage('insufficient');
                    }
                    else if (totaldue_ > totalpayment_) {

                        modalmessage('insufficient');
                    } else {
                   
                        modalmessage('success');
                    }
                        break;
                    default:
                  
                        modalmessage('success');
                }
        }

        function datevalidation()
        {
            const today = new Date().toISOString().split('T')[0];

            // Select all input fields of type date
            const dateInputs = document.querySelectorAll('input[type="date"]');

            // Set max attribute for each date input
            dateInputs.forEach(function (input) {
                input.setAttribute('max', today); // Set max to today's date
            });

            // Validate on form submission
           
        }
        function validateRefInputValues() {
            // Select all <input> elements with the class 'ref-inputs'
            var refInputs = document.querySelectorAll(".ref-inputs");
            var values = [];

            // Loop through the NodeList and retrieve the values
            refInputs.forEach(function (input) {
                // Check if the input is not hidden and has a value
                if (input.type !== "hidden" && input.value.trim() !== "") {
                    values.push(input.value);
                }
            });

            // Check if all values are the same
            var allSame = values.every(function (value) {
                return value === values[0]; // Compare each value to the first one
            });

            // Log the result
            if (allSame && values.length > 0) {
                // console.log("All reference input values are the same:", values[0]);
               
                return true; // Values are the same
            } else {
                // console.log("Reference input values are different or empty:", values);
                return false; // Values are not the same
            }
        }
        </script>
    }
